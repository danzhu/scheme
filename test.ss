(car '(1 2))

;; (let ((inf (lambda (self)
;;              (cons 0 (self self)))))
;;   (car (inf inf)))

;; (let ((fix ((lambda (self)
;;               (self self))
;;             (lambda (self)
;;               (lambda (f)
;;                 (f ((self self) f))))))
;;       (compose (lambda (f g)
;;                  (lambda (a) (f (g a))))))
;;   (let ((map (fix (lambda (map) (lambda (f lst)
;;                              (if (null? lst)
;;                                  null
;;                                  (cons (f (car lst))
;;                                        (map f (cdr lst))))))))
;;         (filter (fix (lambda (filter) (lambda (f lst)
;;                                    (if (null? lst)
;;                                        null
;;                                        (let ((first (car lst))
;;                                              (rest (filter f (cdr lst))))
;;                                          (if (f first)
;;                                              (cons first rest)
;;                                              rest)))))))
;;         (length (fix (lambda (length) (lambda (lst)
;;                                    (if (null? lst)
;;                                        0
;;                                        (+ 1 (length (cdr lst)))))))))
;;     (filter (lambda (a) (> a 3))
;;             (map (lambda (a) (+ a 1))
;;                  (list 1 2 3 4 5 6 (apply + '(3 4 5)))))))
